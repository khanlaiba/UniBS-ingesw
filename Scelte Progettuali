Hi guysss, scrivete qui le vostre idee in modo ordinato, scadenza: 13/05/2025 così poi ci vediamo in call per fare il punto della situazione e 
vedere da che parte cominciare (ovviamente se finiamo prima, l'ultimo mandi un msg su family così ci mettiamo d'accordo anche prima di marted' per sentirci)

BRILANT:
Credo ci sia bisogno di molte sottoclassi anche piccole per poter gestire al meglio il tutto, in allegato c'è il mio UML che arriva fino a slide 13 del PDF,
cioè la versione 1.
Dipendentemente dal corpo dei dati che utilizzeremo ci sono diversi aspetti:
-Una enum con i vari giorni della settimana
-Una enum con i mesi se offriamo
-Un controllo per vedere se l'inizioPeriodo e finePeriodo di un TipoVisita non siano inseriti erroneamente (si può filtrare tutto ciò nel corpo dati ancora prima di
inserirlo nell'applicazione, ne parlermo insieme)
-ho creato una classe CoordinateGeografiche da utilizzare sia in "Luogo" che in "TipoVisita", la prof. esprime esplicitamente la richiesta di essere precisi con 
la posizione, altrimenti con indirizzo tra Via/Piazza/Viale e il numero civico è uno sbatti, posso comunque sostitutire.
-la parte più complessa è inerente alla progettazione del mese successivo, adesso cercherò di scrivere uno schema in ordine temporale chiaro con i passi da seguire
così da non dover riguardare le slide:
    RIFACENDOMI A CHATGPT
    Supponiamo di usare come campione il mese Marzo, se ci troviamo prima  del 15 Marzo allora :
    -Il configuratore indica le date precluse (date dove non si può fare nessuna visita a prescindere)
    -I volontari devono dare la disponiblità per il mese successivo(in questo caso dare disponibilità per il mese di  Aprile)
    Ora siamo dopo il 16 Marzo ( o primo giorno feriale utile)
    -Il configuratore deve genererare il piano delle visite di Aprile
    -Si rendono visibili le visite proposte ed è possibile iscriveri per i fruitori
    Siamo ad aprile: 
    si ricorda che ciascuna visita ha le iscrizioni aperte fino a 3 giorni prima che debbano verificarsi, prima che si arrivi a tale data la visita assumerà 2 valori:
    o sarà COMPLETA quindi se ha raggiunto la soglia massima delle iscrizioni oppure PROPOSTA se non si è alla soglia massima.
    3 giorni prima della visita si effetuerà il controllo finale, ovvero sarà CONFERMATA se la soglia minima delle iscrizioni è stat raggiunga altrimenti sarà 
    vista come CANCELLATA. Il giorno della visita essa avrà solo lo  status: EFFETUATA.


ROXY
Il programma si compone di 4 versioni; opterei per la presenza di 4 package diversi nei quali andare man mano ad espandere la versione
precedente con le nuove aggiunte.
Non mi sono concentrata su particolari attributi e metodi per ora 

VERSIONE 1
Classi che farei:
-	Utente che venga poi estesa da Configuratore, Fruitore e Volontario con le opportune aggiunte
-	Configuratore: nella prima versione fa praticamente tutto lui  necessità di gestire il primo accesso, 
reimpostare credenziali e area territoriale di interesse (opterei regionale ma per me è uguale)
Nb: l’accesso qui è consentito solo a lui, bisogna gestire nel menù l’eventuale errore nel caso in cui gli altri 
due utenti volessero autentificarsi. Utile anche una classe GestoreAutenticazione, che verrà utilizzata anche in seguito
-	Luogo: vista la necessità di nome, descrizione e altri aspetti, tra cui la collocazione geografica, per quest’ultima si potrebbero 
scegliere le coordinate al posto dell’utilizzo per la facilità di gestione (proposto da bri in uni)  classe Coordinate
-	Visita con relativi attributi e classi accessorie da definire in seguito, MA per lo stato della visita utilizzerei un ENUM, 
visto il modo in cui viene descritto nella consegna
-	TipoVisita,  con le relative caratteristiche (titolo, descrizione, durata ecc)
-	Probabilmente servono altre classi che emergeranno in seguito 

VERSIONE 2
Ripartendo dalla versione 1 mi concentro sulla classe Volontario, anche qui bisogna gestire primo accesso, nome utente e password.
Bisogna gestire le sue disponibilità in base ai criteri precisi della consegna, utilizzare due classi che insieme possano gestire ciò,
come CalendarioSistema, che si occupa dei confini dei giorni (prima di 15, da 16 in poi) e una classe Disponibilità per le fasce orarie (su questo non sono sicura).

VERSIONE 3
Il Configuratore entra nel pieno della pianificazione, quindi servono delle classi di gestione più dettagliate e una classe che tenga conto e sia aggiornata 
con il piano delle visite mensili. 
Classi:
-	GestoreSistema: lo userei in concomitanza con un enum StatoSistema che mi dice in che stato siamo, così da saper che operazioni dover svolgere.
Per la gestione di tutti gli indici delle date della linea temporale si potrebbe avere una classe GestoreData che, dato un giorno in input, stabilisce 
se si può chiudere la raccolta delle disponibilità (giorno 16), se si può produrre il piano, se si può riaprire per il mese i+2 ecc.
-	PianoVisite: si occupa della prediposizione del piano per il mese i+1 (elenco delle visite pianificate)
-	GestoreModifiche: si occupa dell’aggiunta dei vincoli e delle rimozioni con i conseguenti effetti collaterali descritti nella consegna

VERSIONE 4 
Viene introdotto il fruitore, dobbiamo occuparci della sua registrazione e autenticazione. Attenzione allo username del fruitore: non deve coincidere con lo username 
di altri fruitori, configuratori o volontari.
Il fruitore può visualizzare le visite, effettuare iscrizioni a queste, visualizzare gli stati delle visite alle quali ha effettuato l’iscrizione o disdire. 
classe Prenotazione e utilizzare l’enum StatoVisita della versione 1; potrebbe essere utile anche un enum StatoPrenotazione (effettuata, disdetta ecc)




LAIBA

VERSIONE 1
Implementazione di una classe Utente da cui derivare, per il momento, la classe Configuratore. 
Configuratore avrà come attributo sicuramente l'oggetto Credenziali (-> classe Credenziali ha come attributi lo username e la password, e sarà suo compito:
    - verificare se è il primo accesso, in tal caso creare metodo per set credenziali nuove, altrimenti verificare l'accesso. 
    - Sarà sempre compito di questa classe verificare qual è il tipo di utente che sta facendo l'accesso.)

Creazione Corpo Dati: essendo un compito esclusivamente del Configuratore, io direi di farlo all'interno della sua classe. 
Di cosa si deve occupare questa parte? 
1) controllo se primo accesso configuratore --> se sì, creazione file, se no skippo tutta questa parte (forse farei una classe apposita per la gestione del File,
    cossichè sia tutto più ordinato)
2) 


